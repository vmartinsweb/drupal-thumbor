<?php

module_load_include('inc', 'thumbor', 'includes/thumbor.form');

/**
 * Implements hook_perm().
 */
function thumbor_permission() {
  return array(
    'administer thumbor' => array(
      'title' => t('Administer thumbor module'),
      'description' => t('Administer and configure Thumbor module'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function thumbor_menu() {
  $items = array();
  $items['admin/config/media/thumbor'] = array(
    'title' => 'Thumbor Settings',
    'description' => 'Configure Thumbor Module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('thumbor_admin_form'),
    'access arguments' => array('administer thumbor'),
    'file' => 'includes/thumbor.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_image_effect_info().
 */
function thumbor_image_effect_info() {

    $effects = array();

    $effects['thumbor'] = array(
        'label' => 'Thumbor',
        'help' => t('Applying the effects of Thumbor. <a href="!url" target="_blank">To learn more see Thumbor doc</a>.', array('!url' => url('https://github.com/thumbor/thumbor/wiki'))),
        'effect callback' => 'thumbor_effect_callback',
        'form callback' => 'thumbor_form_callback',  
    );

    return $effects;
}

/**
 * Implements hook_effect_callback().
 */
function thumbor_effect_callback(&$image, $data) {
    $image_url = file_create_url($image->source);

    $thumbor_url = thumbor_url_generate($data, $image_url);

    if ($image->info['mime_type'] == 'image/jpeg' or $image->info['mime_type'] == 'image/jpg') {    
        $image->resource = @imagecreatefromjpeg($thumbor_url);
    } elseif ($image->info['mime_type'] == 'image/png') {
        $image->resource = @imagecreatefrompng($thumbor_url);
    } elseif ($image->info['mime_type'] == 'image/gif') {
        $image->resource = @imagecreatefrompng($thumbor_url);
    }

    return TRUE;
}



function thumbor_url_generate($data, $image_url) {
    $thumbor_params = array();

    if ($data['trim']['orientation'] != 'none') {
        if (!empty($data['trim']['tolerance'])) {
            $thumbor_params[] = $data['trim']['orientation'].':'.$data['trim']['tolerance'];
        } else {
            $thumbor_params[] = $data['trim']['orientation'];
        }
    }

    if ($data['manual_crop']['left'] > 0 or $data['manual_crop']['top'] or $data['manual_crop']['right'] > 0 or $data['manual_crop']['bottom'] > 0) {
        $thumbor_params[] = $data['manual_crop']['left'].'x'.$data['manual_crop']['top'].':'.$data['manual_crop']['right'].'x'.$data['manual_crop']['bottom'];
    }

    if ($data['fit_in'] != 'none') {
        $thumbor_params[] = $data['fit_in'];
    }

    if ($data['image_size']['width'] != 0 or $data['image_size']['lenght'] != 0) {
        $thumbor_params[] = $data['image_size']['width'].'x'.$data['image_size']['lenght'];
    }

    if ($data['crop_align']['horizontal'] != 'default') {
        $thumbor_params[] = $data['crop_align']['horizontal'];
    }

    if ($data['crop_align']['vertical'] != 'default') {
        $thumbor_params[] = $data['crop_align']['vertical'];
    }

    if ($data['smart'] == 1) {
        $thumbor_params[] = 'smart';
    }

    if (isset($data['filters']) and !empty($data['filters'])) {
        $thumbor_params[] = 'filters:'.$data['filters'];
    }

    $thumbor_server = variable_get('thumbor_server');
    $thumbor_key = variable_get('thumbor_key');

    $thumbor_params[] = $image_url;

    $thumbor_url_params = implode('/', $thumbor_params);

    $thumbor_hmac = base64_encode(hash_hmac('sha1', $thumbor_url_params, $thumbor_key, true));
    $thumbor_hmac = str_replace(array('+','/'), array('-', '_'), $thumbor_hmac);

    return $thumbor_server.'/'.$thumbor_hmac.'/'.$thumbor_url_params; 
}